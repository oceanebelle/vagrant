# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://vagrantcloud.com/search.
  #config.vm.box = "base"

  # Install docker in all machines
  $docker_provision_tpl = <<-SHELL
    echo ====== DOCKER start ======
    apt-get update
    apt-get install -y apt-transport-https ca-certificates curl software-properties-common
    curl -fsSL https://download.docker.com/linux/ubuntu/gpg | apt-key add -
    add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"

    apt-get update
    apt-get install -y docker-ce

    echo ====== DOCKER start ======
  SHELL

  # Template for java provisioning
  $java_provision_tpl = <<-SHELL
    echo ====== JAVA start ======

    echo "LANG=en_US.UTF-8" >> /etc/environment
    echo "LANGUAGE=en_US.UTF-8" >> /etc/environment
    echo "LC_ALL=en_US.UTF-8" >> /etc/environment
    echo "LC_CTYPE=en_US.UTF-8" >> /etc/environment

    add-apt-repository -y ppa:webupd8team/java

    apt-get update
    apt-get -y upgrade

    echo debconf shared/accepted-oracle-license-v1-1 select true | debconf-set-selections 
    echo debconf shared/accepted-oracle-license-v1-1 seen true | debconf-set-selections

    apt-get install -y oracle-java8-installer

    apt-get install -y oracle-java8-set-default
    echo ====== JAVA done ======
  SHELL

  $zookeeper_provision_tpl = <<-SHELL
    echo Install Zookeeper
    apt-get install -y zookeeperd
  SHELL

  $kafka_provision_tpl = <<-SHELL
    echo Install Kafka
    
    wget -q http://mirror.vorboss.net/apache/kafka/1.0.0/kafka_2.11-1.0.0.tgz

    mkdir /opt/Kafka    

    tar -xvf kafka_2.11-1.0.0.tgz -C /opt/Kafka/

    cd /opt/Kafka

    export KAFKA_HEAP_OPTS="-Xmx256M -Xms128M -XX:-UseLargePages"

    /opt/Kafka/kafka_2.11-1.0.0/bin/kafka-server-start.sh /opt/Kafka/kafka_2.11-1.0.0/config/server.properties

  SHELL

  #config.vm.provision "shell", :run => 'always', inline: <<-SHELL
  #  echo Start kafka
  #  /opt/Kafka/kafka_2.10-0.10.0.1/bin/kafka-server-start.sh /opt/Kafka/kafka_2.10-0.10.0.1/config/server.properties
  #SHELL

  $hostname_set_tpl = <<-SHELL
    echo Set the hostname as $1
    hostname $1

    echo Check ip address
    ip addr
  SHELL

  config.vm.box_version = "20180105.0.0"

  config.vm.define "web" do |web|
    web.vm.box = "ubuntu/xenial64"

    web.vm.network "private_network", ip: "10.0.0.14"

    web.vm.provision "shell", inline: $hostname_set_tpl, :args => "web" 

    #web.vm.provision "shell", inline: $docker_provision_tpl

    
  end

  config.vm.define "db" do |db|
    db.vm.box = "ubuntu/xenial64"    

    db.vm.network "private_network", ip: "10.0.0.13"

    db.vm.provision "shell", inline: $hostname_set_tpl, :args => "db" 

    #db.vm.provision "shell", inline: $docker_provision_tpl

    
  end

  config.vm.define "md-zookeeper" do |zookeeper|
    zookeeper.vm.box = "ubuntu/xenial64"    

    zookeeper.vm.network "private_network", ip: "10.0.0.12"

    zookeeper.vm.provision "shell", inline: $hostname_set_tpl, :args => "zookeeper" 

    zookeeper.vm.provision "shell", inline: $java_provision_tpl

    zookeeper.vm.provision "shell", inline: $zookeeper_provision_tpl

    
  end

  config.vm.define "md-kafka1" do |kafka1|
    kafka1.vm.box = "ubuntu/xenial64"    

    kafka1.vm.network "private_network", ip: "10.0.0.11"

    kafka1.vm.provision "shell", inline: $hostname_set_tpl, :args => "kafka1"

    kafka1.vm.provision "shell", inline: $java_provision_tpl

    kafka1.vm.provision "shell", inline: $kafka_provision_tpl
    
  end
  

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # NOTE: This will enable public access to the opened port
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine and only allow access
  # via 127.0.0.1 to disable public access
  # config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  #config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
   config.vm.provider "virtualbox" do |vb|
     # Display the VirtualBox GUI when booting the machine
  #   vb.gui = true
  
     # Customize the amount of memory on the VM:
     vb.memory = "2058"
   end
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Enable provisioning with a shell script. Additional provisioners such as
  # Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the
  # documentation for more information about their specific syntax and use.
  # config.vm.provision "shell", inline: <<-SHELL
  #   apt-get update
  #   apt-get install -y apache2
  # SHELL
end
