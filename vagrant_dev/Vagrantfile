# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://vagrantcloud.com/search.
  
  # headless ubuntu version
  config.vm.box = "ubuntu/xenial64"  
  config.vm.box_version = "20180105.0.0"
  config.vm.network "private_network", ip: "10.0.1.10"

  $docker_provision_tpl = <<-SHELL
    echo ======> DOCKER start
    apt-get update
    apt-get install -y apt-transport-https ca-certificates curl software-properties-common
    curl -fsSL https://download.docker.com/linux/ubuntu/gpg | apt-key add -
    add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"

    apt-get update
    apt-get install -y docker-ce


    echo ======> Install docker-compose
    curl -L https://github.com/docker/compose/releases/download/1.18.0/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose
    chmod +x /usr/local/bin/docker-compose

    echo ======> DOCKER done
  SHELL

  $hostname_set_tpl = <<-SHELL
    echo ======> Set the hostname as $1
    #hostnamectl set-hostname $1 --pretty --static

    echo 127.0.0.1 localhost >> /etc/hosts
    echo 127.0.0.1 $1 >> /etc/hosts

    #echo Check ip address
    #ip addr
  SHELL
  

  config.vm.define "dev-sandbox" do |dev|
    dev.vm.network "private_network", ip: "10.0.1.10"
    dev.vm.hostname="dev-sandbox"    

    dev.vm.provision "shell", run: "always", inline: $hostname_set_tpl, :args => "dev-sandbox"

    # exposes the ports used by tomcat docker
    dev.vm.network "forwarded_port", guest: 8080, host: 8080, host_ip: "127.0.0.1"
    dev.vm.network "forwarded_port", guest: 1099, host: 1099, host_ip: "127.0.0.1"
    dev.vm.network "forwarded_port", guest: 8005, host: 8005, host_ip: "127.0.0.1"
    dev.vm.network "forwarded_port", guest: 8009, host: 8009, host_ip: "127.0.0.1"
    dev.vm.network "forwarded_port", guest: 8000, host: 8000, host_ip: "127.0.0.1"

    # exposes the ports used by cassandra docker
    dev.vm.network "forwarded_port", guest: 7000, host: 7000, host_ip: "127.0.0.1"
    dev.vm.network "forwarded_port", guest: 7001, host: 7001, host_ip: "127.0.0.1"
    dev.vm.network "forwarded_port", guest: 7199, host: 7199, host_ip: "127.0.0.1"
    dev.vm.network "forwarded_port", guest: 9042, host: 9042, host_ip: "127.0.0.1"
    dev.vm.network "forwarded_port", guest: 9160, host: 9160, host_ip: "127.0.0.1"

    
    dev.vm.provision "shell", inline: $docker_provision_tpl

    dev.vm.provision "shell", run: "always", inline: <<-SHELL
      #echo "======> start up the TOMCAT docker"

      # need to copy the docker-compose.yml file first! 
      # and cd to directory
      #cd /vagrant/tomcat
      #docker-compose up --build -d

    SHELL

    dev.vm.provision "shell", run: "always", inline: <<-SHELL
      echo "======> start up the CASSANDRA docker"

      # make a nice space to put cassandra data files in.
      mkdir -p /mnt/cassandra/scripts
      cp /vagrant/cassandra/* /mnt/cassandra/scripts/
      
      
      #cd /vagrant/cassandra
      #docker-compose up --build -d

    SHELL
    
  end

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # NOTE: This will enable public access to the opened port
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine and only allow access
  # via 127.0.0.1 to disable public access
  # config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  config.vm.provider "virtualbox" do |vb|
  #   # Display the VirtualBox GUI when booting the machine
  #   vb.gui = true
  #
     # Customize the amount of memory on the VM:
    vb.memory = "4096"
  end
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Enable provisioning with a shell script. Additional provisioners such as
  # Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the
  # documentation for more information about their specific syntax and use.
  # config.vm.provision "shell", inline: <<-SHELL
  #   apt-get update
  #   apt-get install -y apache2
  # SHELL
end
